{"version":3,"sources":["componets/AddCategory.js","helpers/getGifs.js","componets/GifGridItem.js","componets/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"yMAoCeA,EAjCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAEnB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAgBA,OACI,sBAAMC,SAXU,SAACC,GACjBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,MAMlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAnBc,SAAEP,GACxBF,EAAeE,EAAEQ,OAAOF,a,+BCPnBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAWH,GAD/C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAYZM,GAZY,4CAAH,sDCWLO,EAVK,SAAC,GAAsB,IAAnBH,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAE3B,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,4BAAKA,QCsBFO,EAvBC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAEf,ECLwB,SAACA,GACzB,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAiBI,OAZJC,qBAAU,WACNxB,EAAQC,GACHwB,MAAM,SAAAC,GACCH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAIlB,CAACpB,IAGDqB,EDbsBK,CAAc1B,GAAlCa,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QAErB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAoDhB,IAElDoB,GAAW,mBAAGJ,UAAU,mCAAb,qBAEZ,qBAAKA,UAAU,YAAf,SAEOH,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEiBtBgB,EAjCM,WAEjB,MAAoCzC,mBAAS,CAAC,cAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAQA,OACI,gCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAKA,6BAEQ2C,EAAWnB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAWA,GADLA,Y,MCtBlC6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.648e967a.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = ( e ) => {\r\n        setInputValue( e.target.value );\r\n    }\r\n\r\n    const handleSubmit =(e) => {\r\n        e.preventDefault();\r\n\r\n        if( inputValue.trim().length > 2) {\r\n            setCategories( cats => [ inputValue, ...cats ]);\r\n            setInputValue(''); // Al presionar enter, se borra lo del input anterior\r\n        }\r\n\r\n    }\r\n    \r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <input \r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n    );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory;","\r\nexport const getGifs = async ( category ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=YHCXIwwGIIzlzIcBMtKCCVKoYM0epmPa`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    return gifs;\r\n\r\n}","import React from 'react';\r\n\r\nconst GifGridItem = ( { title, url } ) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\" >\r\n            <img src={ url } alt={ title } />\r\n            <p>{ title }</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GifGridItem;","import React, {  } from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport GifGridItem from './GifGridItem';\r\n\r\n// .then( imgs => setImages( imgs )) /* .then( setImages ) otra opción porque solamente se manda un argumento en la función*/\r\n\r\nconst GifGrid = ({ category }) => {\r\n\r\n    const { data:images, loading } = useFetchGifs( category );\r\n    \r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\" >{category}</h3>\r\n\r\n            { loading && <p className=\"animate__animated animate__flash\" >Loading</p>}\r\n\r\n             <div className=\"card-grid\">\r\n                {\r\n                    images.map(img => (\r\n                        <GifGridItem\r\n                            key={img.id}\r\n                            {...img} /> /* el operador spread sirve aqui para mandar todas las propiedades de img como props */\r\n                     ))\r\n                }\r\n            </div>     \r\n        </>\r\n    );\r\n};\r\n\r\nexport default GifGrid;","import { useState, useEffect } from \"react\"\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then( imgs => {\r\n                    setState({\r\n                        data: imgs,\r\n                        loading: false\r\n                    });\r\n            })\r\n\r\n            }, [category]);\r\n\r\n\r\n        return state; // { data: [], loading: true };\r\n    }","import React, { useState } from 'react';\r\nimport AddCategory from './componets/AddCategory';\r\nimport GifGrid from './componets/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n\r\n    /* const handleAdd = () => {\r\n        setCategories([...categories, 'Seven Daily Sins']);\r\n        //setCategories( cats => [...cats, 'Seven Daily Sins']); //otra opción de agregar al estado\r\n        \r\n    } */\r\n\r\n    return (\r\n        <div>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={ setCategories } />\r\n            <hr />\r\n\r\n            {/* <button onClick={ handleAdd } >Agregar</button>\r\n            <button onClick={ () => handleAdd() } >Agregar</button> otra opción de dar click al botón */}\r\n\r\n            <ol>\r\n                {\r\n                    categories.map( category => (\r\n                        <GifGrid\r\n                            key={ category }\r\n                            category={ category } />\r\n                    ))\r\n                }\r\n            </ol>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}